package main

import (
	"testing"
)

type gameCase struct {
	step    int
	command string
	answer  string
}

var game0cases = [][]gameCase{
	{
		{1, "осмотреться", "ты находишься на кухне, на столе: чай, надо собрать рюкзак и идти в универ. можно пройти - коридор"}, // действие осмотреться
		{2, "идти коридор", "ничего интересного. можно пройти - кухня, комната, улица"},                                          // действие идти
		{3, "идти комната", "ты в своей комнате. можно пройти - коридор"},
		{4, "осмотреться", "на столе: ключи, конспекты, на стуле: рюкзак. можно пройти - коридор"},
		{5, "надеть рюкзак", "вы надели: рюкзак"},                 // действие надеть
		{6, "взять ключи", "предмет добавлен в инвентарь: ключи"}, // действие взять
		{7, "взять конспекты", "предмет добавлен в инвентарь: конспекты"},
		{8, "идти коридор", "ничего интересного. можно пройти - кухня, комната, улица"},
		{9, "применить ключи дверь", "дверь открыта"}, // действие применить
		{10, "идти улица", "на улице весна. можно пройти - домой"},
	},

	{
		{1, "осмотреться", "ты находишься на кухне, на столе: чай, надо собрать рюкзак и идти в универ. можно пройти - коридор"},
		{2, "завтракать", "неизвестная команда"},  // придётся топать в универ голодным :(
		{3, "идти комната", "нет пути в комната"}, // через стены ходить нельзя
		{4, "идти коридор", "ничего интересного. можно пройти - кухня, комната, улица"},
		{5, "применить ключи дверь", "нет предмета в инвентаре - ключи"},
		{6, "идти комната", "ты в своей комнате. можно пройти - коридор"},
		{7, "осмотреться", "на столе: ключи, конспекты, на стуле: рюкзак. можно пройти - коридор"},
		{8, "взять ключи", "некуда класть"}, // надо взять рюкзак сначала
		{9, "надеть рюкзак", "вы надели: рюкзак"},
		{10, "осмотреться", "на столе: ключи, конспекты. можно пройти - коридор"}, // состояние изменилось
		{11, "взять ключи", "предмет добавлен в инвентарь: ключи"},
		{12, "взять телефон", "нет такого"},                                // неизвестный предмет
		{13, "взять ключи", "нет такого"},                                  // предмета уже нет в комнате - мы его взяли
		{14, "осмотреться", "на столе: конспекты. можно пройти - коридор"}, // состояние изменилось
		{15, "взять конспекты", "предмет добавлен в инвентарь: конспекты"},
		{16, "осмотреться", "пустая комната. можно пройти - коридор"}, // состояние изменилось
		{17, "идти коридор", "ничего интересного. можно пройти - кухня, комната, улица"},
		{18, "идти кухня", "кухня, ничего интересного. можно пройти - коридор"},
		{19, "осмотреться", "ты находишься на кухне, на столе: чай, надо идти в универ. можно пройти - коридор"}, // состояние изменилось
		{20, "идти коридор", "ничего интересного. можно пройти - кухня, комната, улица"},
		{21, "идти улица", "дверь закрыта"},                                  // условие не удовлетворено
		{22, "применить ключи дверь", "дверь открыта"},                       // состояние изменилось
		{23, "применить телефон шкаф", "нет предмета в инвентаре - телефон"}, // нет предмета
		{24, "применить ключи шкаф", "не к чему применить"},                  // предмет есть, но применить его к этому нельзя
		{25, "идти улица", "на улице весна. можно пройти - домой"},
	},
}

func TestGame0(t *testing.T) {
	for caseNum, commands := range game0cases {
		initGame()
		for _, item := range commands {
			answer := handleCommand(item.command)
			if answer != item.answer {
				t.Error("case:", caseNum, item.step,
					"\n\tcmd:", item.command,
					"\n\tresult:  ", answer,
					"\n\texpected:", item.answer)
			}
		}
	}
}

func TestEdgeCases(t *testing.T) {
	initGame()
	// empty command
	if handleCommand("") != "неизвестная команда" {
		t.Fatalf("expected unknown for empty command")
	}
	// unknown verb
	if handleCommand("foo bar") != "неизвестная команда" {
		t.Fatalf("expected unknown for unknown verb")
	}
	// apply without item
	initGame()
	if handleCommand("применить ") != "неизвестная команда" {
		t.Fatalf("expected unknown for apply without args")
	}
	// try to open door twice: second time should say already open only after opening
	initGame()
	// go to room, wear backpack, take keys, go back to corridor and open door
	handleCommand("идти коридор")
	handleCommand("идти комната")
	handleCommand("надеть рюкзак")
	handleCommand("взять ключи")
	handleCommand("идти коридор")
	res := handleCommand("применить ключи дверь")
	if res != "дверь открыта" {
		t.Fatalf("expected дверь открыта, got %s", res)
	}
	res2 := handleCommand("применить ключи дверь")
	if res2 != "дверь уже открыта" {
		t.Fatalf("expected дверь уже открыта, got %s", res2)
	}
}

func TestMoreEdgeCases(t *testing.T) {
	// missing args for взять/надеть
	initGame()
	if handleCommand("взять") != "неизвестная команда" {
		t.Fatalf("expected unknown for 'взять' without args")
	}
	if handleCommand("надеть") != "неизвестная команда" {
		t.Fatalf("expected unknown for 'надеть' without args")
	}

	// duplicate take
	initGame()
	handleCommand("идти коридор")
	handleCommand("идти комната")
	handleCommand("надеть рюкзак")
	res := handleCommand("взять ключи")
	if res != "предмет добавлен в инвентарь: ключи" {
		t.Fatalf("expected to take keys first time, got %s", res)
	}
	res2 := handleCommand("взять ключи")
	if res2 != "нет такого" {
		t.Fatalf("expected 'нет такого' when taking same item twice, got %s", res2)
	}

	// wrong apply target
	initGame()
	handleCommand("идти коридор")
	handleCommand("идти комната")
	handleCommand("надеть рюкзак")
	handleCommand("взять ключи")
	handleCommand("идти коридор")
	if handleCommand("применить ключи шкаф") != "не к чему применить" {
		t.Fatalf("expected 'не к чему применить' for wrong target")
	}

	// non-existent exit
	initGame()
	if handleCommand("идти лево") != "нет пути в лево" {
		t.Fatalf("expected 'нет пути в лево' for moving to unknown exit")
	}
}
